<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>poincareGYP</title>
    <link>https://poincaregyp.github.io/</link>
    <description>Recent content on poincareGYP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>poincaregyp@gmail.com (Aditya Kumar Singh)</managingEditor>
    <webMaster>poincaregyp@gmail.com (Aditya Kumar Singh)</webMaster><atom:link href="https://poincaregyp.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project Euler 1 : Multiples of $3$ or $5$</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-1/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-1/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=1&#34;&gt;Multiples of $3$ or $5$&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding basic arithmetic is sufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isMultipleOf3or5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isMultipleOf3or5&lt;/span&gt; n 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; mod n &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mod n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print (sum [n &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;], isMultipleOf3or5 n])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/1.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler 2 : Even Fibonacci Numbers</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-2/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-2/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=2&#34;&gt;Even Fibonacci Numbers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge of basic arithmetic and Fibonacci sequence is sufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Haskell&#34; data-lang=&#34;Haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- upper bound&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ub&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ub&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sumEvenFibo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sumEvenFibo&lt;/span&gt; prevTerm curTerm ub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; curTerm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; ub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; even curTerm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curTerm &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sumEvenFibo curTerm nextTerm ub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sumEvenFibo curTerm nextTerm ub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nextTerm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prevTerm &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; curTerm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print (sumEvenFibo &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ub)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/2.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler 3 : Largest Prime Factor</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-3/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-3/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=3&#34;&gt;Largest Prime Factor&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplest answer is to find all prime up to n, check largest prime diving n. But, the given number is very large. How can we reduce search space ?&lt;/li&gt;
&lt;/ul&gt;
 

&lt;details&gt;
    &lt;summary&gt;hint 2&lt;/summary&gt;

&lt;ul&gt;
&lt;li&gt;If prime $p$ divide $n$, then $p &amp;lt; \sqrt{n}$ or $p = n$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
 

&lt;details&gt;
    &lt;summary&gt;hint 3&lt;/summary&gt;

&lt;ul&gt;
&lt;li&gt;If $p &amp;lt; n$ is the largest prime factor of $n$, then the largest prime factor of $n$ is also largest prime factor of $\frac{n}{p&amp;rsquo;}$ where $p&amp;rsquo;$ is any prime diving $n$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; GHC.Float (&lt;span style=&#34;color:#a6e22e&#34;&gt;float2Int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;int2Float&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- return (x / (y^p)) where is p is the highest power of y that divide x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;divByHighestPower&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;divByHighestPower&lt;/span&gt; x y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; mod x y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divByHighestPower (div x y) y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findLargestPrimeFactor_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findLargestPrimeFactor_&lt;/span&gt; x y upperBound
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; upperBound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; mod x y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max y reducedY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findLargestPrimeFactor_ x (y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) upperBound
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        reducedY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findLargestPrimeFactor_ (divByHighestPower x y) y upperBound
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- sufficient to check divisibility of n till sqrt(n) to find latest prime factor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findLargestPrimeFactor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findLargestPrimeFactor&lt;/span&gt; n p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findLargestPrimeFactor_ n p upperBound
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        upperBound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float2Int (sqrt (int2Float n)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findLargestPrimeFactor n&amp;#39; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&amp;#39; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divByHighestPower n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print (solve &lt;span style=&#34;color:#ae81ff&#34;&gt;600851475143&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/3.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler 4 : Largest Palindrome Product</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-4/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-4/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=4&#34;&gt;Largest Palindrome Product&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding of Palindrome is suffice&lt;/li&gt;
&lt;li&gt;Same problem is explained in detail at &lt;a href=&#34;https://nrich.maths.org/2574&#34;&gt;nrich&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; GHC.Float (&lt;span style=&#34;color:#a6e22e&#34;&gt;float2Int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;int2Float&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- return ith digit of n starting from right.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 1st digit of 123 is 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDigit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDigit&lt;/span&gt; n i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mod (div n (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- check n has same digit at ith and jth place from right&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasSameDigit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasSameDigit&lt;/span&gt; n i j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getDigit n i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; getDigit n j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- return number of digit in n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numberOfDigit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numberOfDigit&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float2Int (logBase &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; (int2Float n)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- check whether n is palindrome or not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPalindrome&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPalindrome&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; and [hasSameDigit n (noOfDigit &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i) i &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; upperBound]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    noOfDigit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numberOfDigit n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    upperBound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; div noOfDigit &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- pick largest element from non-empty list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max_&lt;/span&gt; [x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max_&lt;/span&gt; (x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;xs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max x (max_ xs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_ [x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;], y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; [x &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;], isPalindrome (x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  print answer 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/4.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler 5 : Smallest Multiple</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-5/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-5/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=5&#34;&gt;Smallest Multiple&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding LCM (Least common multiple) and GCD (Greatest common divisor) is sufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcd_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcd_&lt;/span&gt; n m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd_ m n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd_ m r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mod n m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lcd_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lcd_&lt;/span&gt; n m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; div n g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd_ n m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldl lcd_ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print answer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/5.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler 6 : Sum Square Difference</title>
      <link>https://poincaregyp.github.io/posts/project-euler/project-euler-6/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/project-euler/project-euler-6/</guid>
      <description>&lt;p&gt;Link to official statement : &lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Sum Square Difference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hints&#34;&gt;Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge of basic arithmetic is suffice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
 

&lt;details&gt;
    &lt;summary&gt;Haskell&lt;/summary&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfSequareOfFirst&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfSequareOfFirst&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum (map (&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; n])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;squareOfSumOfFirst&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;squareOfSumOfFirst&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; n] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print (abs (squareOfSumOfFirst &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sumOfSequareOfFirst &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checkout solution at &lt;a href=&#34;https://github.com/poincareGYP/project-euler/blob/main/solution/6.hs&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Taylor&#39;s series and Maclaurin&#39;s series</title>
      <link>https://poincaregyp.github.io/posts/calculus/taylor-theorem/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <author>poincaregyp@gmail.com (Aditya Kumar Singh)</author>
      <guid>https://poincaregyp.github.io/posts/calculus/taylor-theorem/</guid>
      <description>&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Given a continuous function $f(x)$. Can we find other $g(x)$ which is approximately same to $f(x)$ ?&lt;/p&gt;
 

&lt;details&gt;
    &lt;summary&gt;Why do we want to do this ? &lt;/summary&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sometime it is easier to deal with function like polynomial than to deal with complicated function like $sin(x) + cos(x)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Curiosity, why not ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h2 id=&#34;taylors-formula-and-maclaurins-formula&#34;&gt;Taylor&amp;rsquo;s formula and Maclaurin&amp;rsquo;s formula&lt;/h2&gt;
&lt;p&gt;Let suppose $p(x)$ is a polynomial of degree $n$.&lt;/p&gt;
&lt;h3 id=&#34;maclaurins-formula&#34;&gt;Maclaurin&amp;rsquo;s formula&lt;/h3&gt;
&lt;p&gt;Expanding function $p(x)$ as power of $x$ as&lt;/p&gt;
&lt;p&gt;$$
\begin{equation}
p(x) = c_{0} + c_{1}x + c_{2}x^{2}+\cdots+c_{n}x^{n}
\end{equation}
$$
differentiating it successfully $n$ times, we get&lt;/p&gt;
&lt;p&gt;$$
% \begin{equation}
p&amp;rsquo;(x) = c_{1}+2 \cdot c_{2}x+\cdots+n \cdot c_{n}x^{(n+1)}
$$
$$
p&amp;rsquo;&amp;rsquo;(x) = 2 \cdot c_{2}+ 2 \cdot 3 \cdot c_{3}x +\cdots+ (n - 1) \cdot n \cdot c_{n}x^{(n+2)}
$$
$$
\vdots
$$
$$
p^{(n)}(x) = 1 \cdot 2 \cdot 3 \cdots n \cdot c_{n}
$$&lt;/p&gt;
&lt;p&gt;setting $x = 0$ in above equations, we get
$$
c_{0}= p(0), \quad c_{1} = \frac{p&amp;rsquo;(0)}{1!}, \quad c_{2} = \frac{p&amp;rsquo;&amp;rsquo;(0)}{2!},  \quad \cdots \quad
c_{n} = \frac{p^{(n)}(0)}{n!}
$$
putting these calculated coefficient in equation $1$, we get
$$
\begin{equation}
p(x) = p(0) + \frac{p&amp;rsquo;(0)}{1!}x + \frac{p&amp;rsquo;&amp;rsquo;(0)}{2!}x^{2} + \frac{p&amp;rsquo;&amp;rsquo;&amp;rsquo;(0)}{3!}x^{3} + \cdots + \frac{p^{(n)}(0)}{n!}x^{n}
\end{equation}
$$&lt;/p&gt;
&lt;p&gt;Equation $2$ is called &lt;em&gt;&lt;strong&gt;Maclaurin&amp;rsquo;s formula&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Till this point, we have not achieved anything beside finding coefficient value of $p(x)$.&lt;/p&gt;
&lt;h3 id=&#34;taylors-formula&#34;&gt;Taylor&amp;rsquo;s formula&lt;/h3&gt;
&lt;p&gt;In &lt;em&gt;&lt;strong&gt;Maclaurin&amp;rsquo;s formula&lt;/strong&gt;&lt;/em&gt;, we are expanding function $p(x)$ as power of $x$, But we can also expand the equation with respect to power of $x - a$ where $a$ is a constant value.&lt;/p&gt;
&lt;p&gt;$$
\begin{equation}
p(x) = c_{0} + c_{1}(x - a) + c_{2}(x - a)^{2}+\cdots+c_{n}(x - a)^{n}
\end{equation}
$$&lt;/p&gt;
&lt;p&gt;Lets apply same logic we applied to last section.&lt;/p&gt;
&lt;p&gt;Differentiating it successfully $n$ times, we get&lt;/p&gt;
&lt;p&gt;$$
p&amp;rsquo;(x) = c_{1}+2 \cdot c_{2}(x - a)+\cdots+n \cdot c_{n}(x - a)^{(n+1)}
$$&lt;/p&gt;
&lt;p&gt;$$
p&amp;rsquo;&amp;rsquo;(x) = 2 \cdot c_{2}+ 2 \cdot 3 \cdot c_{3}(x - a) +\cdots+ (n - 1) \cdot n \cdot c_{n}(x - a)^{(n+2)}
$$&lt;/p&gt;
&lt;p&gt;$$
\vdots
$$&lt;/p&gt;
&lt;p&gt;$$
p^{(n)}(x) = 1 \cdot 2 \cdot 3 \cdots n \cdot c_{n}
$$&lt;/p&gt;
&lt;p&gt;setting $x = a$ in above equations, we get&lt;/p&gt;
&lt;p&gt;$$
c_{0}= p(a), \quad c_{1} = \frac{p&amp;rsquo;(a)}{1!}, \quad c_{2} = \frac{p&amp;rsquo;&amp;rsquo;(a)}{2!},  \quad \cdots \quad
c_{n} = \frac{p^{(n)}(a)}{n!}
$$&lt;/p&gt;
&lt;p&gt;putting these calculated coefficient in equation $3$, we get&lt;/p&gt;
&lt;p&gt;$$
\begin{equation}
p(x) = p(a) + \frac{p&amp;rsquo;(a)}{1!}(x - a) + \frac{p&amp;rsquo;&amp;rsquo;(a)}{2!}(x - a)^{2} + \frac{p&amp;rsquo;&amp;rsquo;&amp;rsquo;(a)}{3!}(x - a)^{3} + \cdots + \frac{p^{(n)}(a)}{n!}(x - a)^{n}
\end{equation}
$$&lt;/p&gt;
&lt;p&gt;Equation $4$ is called &lt;em&gt;&lt;strong&gt;Taylor&amp;rsquo;s formula&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;Let $p(x) = (4x + 3)^3$. $p(x)$ have derivative upto till degree 3.(higher derivative than 3 degree exists but is meaingless to this example, why ?)&lt;/p&gt;
&lt;p&gt;$$
p&amp;rsquo;(x) = 12 (4x + 3)^2
$$&lt;/p&gt;
&lt;p&gt;$$
p&amp;rsquo;&amp;rsquo;(x) = 96 (4x + 3)
$$&lt;/p&gt;
&lt;p&gt;$$
p&amp;rsquo;&amp;rsquo;&amp;rsquo;(x) = 386
$$&lt;/p&gt;
&lt;p&gt;At $x = 0$, we have&lt;/p&gt;
&lt;p&gt;$$
p(0) = 27, \qquad p&amp;rsquo;(0) = 108, \qquad p&amp;rsquo;&amp;rsquo;(0) = 288, \qquad p&amp;rsquo;&amp;rsquo;&amp;rsquo;(0) = 386
$$&lt;/p&gt;
&lt;p&gt;Using Maclaurin&amp;rsquo;s formula(equation $2$), we have&lt;/p&gt;
&lt;p&gt;$$
p(x) = 64x^3 + 144x^2 + 108x + 27
$$&lt;/p&gt;
&lt;p&gt;At $x = 1$, we have
$$
p(1) = 343, \qquad p&amp;rsquo;(1) = 588, \qquad p&amp;rsquo;&amp;rsquo;(1) = 672, \qquad p&amp;rsquo;&amp;rsquo;&amp;rsquo;(1) = 386
$$&lt;/p&gt;
&lt;p&gt;Using Taylor&amp;rsquo;s formula(equation $4$), we have&lt;/p&gt;
&lt;p&gt;$$
p(x) = 64(x - 1)^3 + 336(x -1)^2 + 588(x - 1) + 343
$$&lt;/p&gt;
&lt;p&gt;Even though Taylor&amp;rsquo;s formula and Maclaurin&amp;rsquo;s formula looks different for $p(x)$, Both are same thing. It is just different way to represent $p(x)$.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;postulate&#34;&gt;Postulate&lt;/h2&gt;
&lt;p&gt;In last section, We were toying with different representation of polynomial $p(x)$.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
